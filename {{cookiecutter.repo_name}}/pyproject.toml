[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=60",
  "setuptools-scm>=8",
]

[project]
name = "{{cookiecutter.repo_name}}"
description = "{{cookiecutter.short_description}}"
readme = "README.rst"
license = { text = "MIT" }
authors = [{ name = "{{cookiecutter.author_name}}", email = "{{cookiecutter.author_email}}" }]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Scientific/Engineering :: Hydrology",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
  "click>=0.7",
]
[project.optional-dependencies]
test = [
  "pytest-cov",
  "pytest-sugar",
  "pytest-xdist[psutil]",
]
[project.urls]
CI = "https://github.com/hyriver/{{cookiecutter.repo_name}}/actions"
Changelog = "https://docs.hyriver.io/changelogs/{{cookiecutter.repo_name}}.html"
Homepage = "https://docs.hyriver.io/readme/{{cookiecutter.repo_name}}.html"
Issues = "https://github.com/hyriver/{{cookiecutter.repo_name}}/issues"
[project.scripts]
{{cookiecutter.pkg_name}} = "{{cookiecutter.pkg_name}}.cli:cli"

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE"]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
{{cookiecutter.pkg_name}} = ["py.typed"]

[tool.setuptools.packages]
find = { namespaces = false }

[tool.setuptools_scm]
fallback_version = "999"

[tool.ruff]
target-version = "py38"
lint.select = [
  # flake8-bugbear
  "B",
  # flake8-comprehensions
  "C4",
  # pydocstyle
  "D",
  # Error
  "E",
  # pyflakes
  "F",
  # isort
  "I",
  # flake8-implicit-str-concat
  "ISC",
  # pep8-naming
  "N",
  # pygrep-hooks
  "PGH",
  # flake8-pytest-style
  "PT",
  # flake8-use-pathlib
  "PTH",
  # flake8-quotes
  "Q",
  # bandit
  "S",
  # flake8-simplify
  "SIM",
  # flake8-print
  "T20",
  # tryceratops
  "TRY",
  # pyupgrade
  "UP",
  # Warning
  "W",
  # flake8-2020
  "YTT",
  # flake8-debugger
  "T10",
  # flake8-gettext
  "INT",
  # pylint
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # type-checking imports
  "TCH",
  # Ruff-specific rules
  "RUF",
]

exclude = ["__pycache__", ".nox"]

lint.ignore = [
  # docstring in class __init__
  "D107",
  # long too long, let the formatter handle it
  "E501",
  # too many arguments
  "PLR0913",
  # conflict with ruff-formatter
  "ISC001",
]
lint.extend-safe-fixes = [
  # absolute imports
  "TID252",
]
line-length = 100

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  # Disable all docstring checks in tests
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # magic values
  "PLR2004",
  # use of "assert"
  "S101",
  # possible hardcoded password
  "S106",
  # Mutable class attributes
  "RUF012",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = [
  "{{cookiecutter.pkg_name}}",
  "async_retriver",
  "pygeoogc",
  "pygeoutils",
  "pynhd",
  "py3dep",
  "hydrosignatures",
  "pygeohydro",
  "pydaymet",
  "pygridmet",
  "pynldas2",
]

[tool.codespell]
skip = "__pycache__,_build,.mypy_cache,.git,./htmlcov,.nox"
ignore-words-list = "gage,gages"

[tool.pytest.ini_options]
addopts = "-n=auto -v --cov={{cookiecutter.pkg_name}} --cov-report xml --durations=5"
doctest_optionflags = 'NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER'
filterwarnings = [
  "ignore:.*numpy.ndarray size changed.*",
]
testpaths = ["tests", "{{cookiecutter.pkg_name}}"]

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:"]
ignore_errors = true

[tool.coverage.run]
branch = true
omit = ["**/__init__.py", "**/print_versions.py"]
parallel = true
source = ["{{cookiecutter.pkg_name}}"]

[tool.pyright]
exclude = [".nox/", "**/__pycache__", "**/__init__.py", "tests/"]
include = ["{{cookiecutter.pkg_name}}"]
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportAttributeAccessIssue = false
typeCheckingMode = "strict"

[tool.fixit]
formatter = "ufmt"

[tool.refurb]
python_version = "3.8"
quiet = true
